---
// RSS订阅源主页面
// 显示所有可用的RSS订阅源

import { defaultRSSConfig } from "@/utils/rss";
import type { RSSSource, RSSFeed } from "@/types";
import RSSFeedTable from "@/components/rss/RSSFeedTable.astro";
import PageLayout from "@/layouts/Base.astro";
import { Icon } from "astro-icon/components";
import { XMLParser } from 'fast-xml-parser';

export const prerender = false; // 改为false以支持动态URL参数

// 动态导入 Upstash Redis 以避免构建问题
let redis: any = null;
try {
  if (import.meta.env.UPSTASH_REDIS_REST_URL && import.meta.env.UPSTASH_REDIS_REST_TOKEN) {
    const { Redis } = await import('@upstash/redis');
    redis = new Redis({
      url: import.meta.env.UPSTASH_REDIS_REST_URL,
      token: import.meta.env.UPSTASH_REDIS_REST_TOKEN,
    });
    console.log('Redis已初始化');
  }
} catch (error) {
  console.error('Redis初始化失败:', error);
}

// 内存缓存
const memoryCache = new Map<string, { data: any; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5分钟

// 获取缓存
async function getCachedData(key: string): Promise<any | null> {
  // 先尝试 Redis
  if (redis) {
    try {
      const data = await redis.get(key);
      if (data) return typeof data === 'string' ? JSON.parse(data) : data;
    } catch (error) {
      console.error('Redis读取失败:', error);
    }
  }
  
  // 降级到内存缓存
  const cached = memoryCache.get(key);
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    return cached.data;
  }
  
  return null;
}

// 设置缓存
async function setCachedData(key: string, data: any): Promise<void> {
  // 保存到 Redis
  if (redis) {
    try {
      await redis.setex(key, 300, JSON.stringify(data)); // 5分钟过期
    } catch (error) {
      console.error('Redis写入失败:', error);
    }
  }
  
  // 同时保存到内存
  memoryCache.set(key, { data, timestamp: Date.now() });
}

// 带超时的 fetch
async function fetchWithTimeout(url: string, timeout: number = 3000): Promise<Response> {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; RSS Reader)',
        'Accept': 'application/rss+xml, application/xml, text/xml',
      },
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}

// 解析单个RSS源
async function fetchSingleSource(source: RSSSource): Promise<RSSFeed | null> {
  try {
    const response = await fetchWithTimeout(source.url, 3000);
    
    if (!response.ok) {
      console.error(`RSS源 ${source.name} 请求失败: ${response.status}`);
      return null;
    }

    const xmlText = await response.text();
    
    const parser = new XMLParser({
      ignoreAttributes: false,
      attributeNamePrefix: "@_",
      textNodeName: "#text",
      parseAttributeValue: true,
      parseTagValue: true,
      trimValues: true,
    });

    const result = parser.parse(xmlText);
    const rss = result.rss || result.feed;
    
    if (!rss) {
      console.error(`RSS源 ${source.name} 格式无效`);
      return null;
    }

    const channel = rss.channel || rss;
    const itemElements = channel.item || channel.entry || [];
    const itemsArray = Array.isArray(itemElements) ? itemElements : [itemElements];
    
    const items = itemsArray.slice(0, 20).map((item: any, index: number) => {
      const title = item.title?.['#text'] || item.title || '';
      const description = item.description?.['#text'] || item.description || item.summary || '';
      const link = item.link?.['#text'] || item.link || '';
      const pubDate = item.pubDate || item.published || item.updated || new Date().toISOString();
      
      return {
        id: `${source.id}-${index}`,
        title: typeof title === 'string' ? title.trim() : '',
        description: typeof description === 'string' ? description.trim().slice(0, 500) : '',
        content: description,
        link: typeof link === 'string' ? link.trim() : '',
        pubDate,
        sourceId: source.id,
        sourceName: source.name,
        read: false,
      };
    }).filter((item: any) => item.title && item.link);

    return {
      source,
      items,
      lastBuildDate: channel.lastBuildDate || new Date().toISOString(),
    };
  } catch (error) {
    console.error(`获取RSS源 ${source.name} 失败:`, error);
    return null;
  }
}

// 获取所有订阅源
const sources = defaultRSSConfig.sources;

// 从URL参数获取选中的源
const selectedSource = Astro.url.searchParams.get('source') || 'all';
const forceRefresh = Astro.url.searchParams.get('refresh') === 'true';

// 获取RSS数据
let allFeeds: RSSFeed[] = [];
let totalArticles = 0;
let fetchError: string | null = null;
let fetchStats: any = {};
let fromCache = false;

try {
  const cacheKey = 'rss-all-feeds';
  
  // 检查缓存（除非强制刷新）
  if (!forceRefresh) {
    const cachedData = await getCachedData(cacheKey);
    if (cachedData) {
      allFeeds = cachedData.feeds || [];
      fetchStats = cachedData.stats || {};
      totalArticles = allFeeds.reduce((sum: number, feed: RSSFeed) => sum + feed.items.length, 0);
      fromCache = true;
      console.log('使用缓存的RSS数据');
    }
  }
  
  // 如果没有缓存或强制刷新，并行获取所有源
  if (!fromCache || forceRefresh) {
    console.log('并行获取RSS源...');
    const startTime = Date.now();
    
    // 使用 Promise.allSettled 并行获取
    const promises = sources.map(source => fetchSingleSource(source));
    const results = await Promise.allSettled(promises);
    
    const errors: string[] = [];
    
    results.forEach((result, index) => {
      if (result.status === 'fulfilled' && result.value) {
        allFeeds.push(result.value);
      } else {
        const sourceName = sources[index]?.name || `源 ${index + 1}`;
        errors.push(`${sourceName}: 获取失败`);
      }
    });
    
    totalArticles = allFeeds.reduce((sum: number, feed: RSSFeed) => sum + feed.items.length, 0);
    
    const duration = Date.now() - startTime;
    fetchStats = {
      total: sources.length,
      successful: allFeeds.length,
      failed: errors.length,
      duration,
      fromCache: false,
    };
    
    // 保存到缓存
    const cacheData = {
      feeds: allFeeds,
      stats: fetchStats,
      timestamp: new Date().toISOString(),
    };
    await setCachedData(cacheKey, cacheData);
    
    console.log(`获取完成，耗时: ${duration}ms，成功: ${allFeeds.length}/${sources.length}`);
  }
} catch (error) {
  fetchError = `获取RSS数据时发生错误: ${error instanceof Error ? error.message : '未知错误'}`;
  console.error(fetchError);
}

const meta = {
  title: "RSS订阅源",
  description: "浏览来自多个来源的最新RSS订阅内容",
  ogImage: "/og-image.png"
};
---

<PageLayout meta={meta}>
  <section class="rss-page-header">
    <h1 class="title mb-6">RSS订阅源</h1>
    <p class="mb-8 text-lg text-gray-700 dark:text-gray-300 leading-relaxed">
      探索来自多个优质来源的最新内容，包括技术博客、新闻资讯和行业动态。
      所有内容都经过精心筛选，为您提供最有价值的信息。
    </p>

    <!-- 订阅源统计 -->
    <div class="rss-stats mb-8">
      <div class="grid grid-cols-1 sm:grid-cols-3 gap-6">
        <div class="rss-stat-card">
          <div class="rss-stat-number text-3xl font-bold text-blue-600 dark:text-blue-400">
            {sources.length}
          </div>
          <div class="rss-stat-label text-gray-600 dark:text-gray-400">
            订阅源
          </div>
        </div>
        <div class="rss-stat-card">
          <div class="rss-stat-number text-3xl font-bold text-green-600 dark:text-green-400">
            {totalArticles}
          </div>
          <div class="rss-stat-label text-gray-600 dark:text-gray-400">
            总文章数
          </div>
        </div>
        <div class="rss-stat-card">
          <div class="rss-stat-number text-3xl font-bold text-purple-600 dark:text-purple-400">
            {sources.filter(source => source.isActive !== false).length}
          </div>
          <div class="rss-stat-label text-gray-600 dark:text-gray-400">
            活跃源
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- RSS订阅源内容（列表+分页） -->
  <section class="rss-feeds-section">
    <RSSFeedTable 
      sources={sources} 
      selectedSource={selectedSource} 
      itemsPerPage={15}
      currentPage={Number(Astro.url.searchParams.get('page') || '1')}
    />
  </section>

  <!-- 页面说明 -->
  <section class="rss-info-section mt-16">
    <div class="rss-info-card">
      <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
        关于RSS订阅源
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-600 dark:text-gray-400">
        <div>
          <h4 class="font-medium mb-2 text-gray-800 dark:text-gray-200">实时更新</h4>
          <p>所有内容都会实时从原始来源同步，确保您看到的是最新信息。</p>
        </div>
        <div>
          <h4 class="font-medium mb-2 text-gray-800 dark:text-gray-200">内容筛选</h4>
          <p>我们只收录高质量、有价值的内容源，为您节省时间。</p>
        </div>
        <div>
          <h4 class="font-medium mb-2 text-gray-800 dark:text-gray-200">多格式支持</h4>
          <p>支持各种RSS格式，包括RSS 2.0、Atom等标准格式。</p>
        </div>
        <div>
          <h4 class="font-medium mb-2 text-gray-800 dark:text-gray-200">离线阅读</h4>
          <p>内容会缓存到本地，支持离线阅读，提升访问速度。</p>
        </div>
      </div>
    </div>
  </section>
</PageLayout>

<style>
  .rss-page-header {
    @apply mb-12;
  }

  .rss-stats {
    @apply mb-8;
  }

  .rss-stat-card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 text-center border border-gray-200 dark:border-gray-700;
  }

  .rss-stat-number {
    @apply mb-2;
  }

  .rss-stat-label {
    @apply text-sm font-medium;
  }

  .rss-feeds-section {
    @apply mb-12;
  }

  .rss-info-section {
    @apply border-t border-gray-200 dark:border-gray-700 pt-16;
  }

  .rss-info-card {
    @apply bg-gray-50 dark:bg-gray-800/50 rounded-lg p-8 border border-gray-200 dark:border-gray-700;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .rss-page-header .title {
      @apply text-2xl;
    }

    .rss-stats .grid {
      @apply grid-cols-1 gap-4;
    }

    .rss-info-card .grid {
      @apply grid-cols-1 gap-4;
    }
  }
</style>